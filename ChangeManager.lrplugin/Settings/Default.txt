--[[
        Additional settings definition file - accessed by selecting 'Edit Advanced Settings' from drop-down in plugin manager (preset manager section).
        
        *** Reminder: reload plugin after editing this file - for changes to take effect.
            
        *** Important: when editing, take care to assure punctuation and syntax are not disturbed. In comments, it doesn't matter, but in the rest - every character is potentially meaningful,
                       including spaces, commas, brackets, dots, underscores...
                       
        There are 2 kinds of comments:
        1. single line
        2. multi-line (like this one).
        
        lines beginning with '--' (without the apostrophes) are single line comments.
        lines beginning with '- - [ [' (without the spaces) begin multi-line comments, which end with '- - ] ]' (without the spaces).

        
        Speaking of quotes and apostrophe's: they're equivalent - they both delimit text strings (but you can nest double-quotes within apostrophe-delimited strings and vice versa,
        without escaping, examples:
        local mystring = 'This is a "string"' -- ok
        local mystring = "This is a 'string'" -- ok
        local mystring = 'This is a 'string'' -- not ok
        local mystring = "This is a "string"" -- not ok
        local mystring = 'This is a \'string\'' -- ok (apostrophes have been "escaped" via backslash character)
        local mystring = "This is a \"string\"" -- ok (double-quotes are escaped)

        
        Definitions:
        
        * Comment-out: to prepend '--' to a non-comment line making it a comment, or to wrap one or more non-comment lines with '- - [ [' & '- - ] ]'. This turns non-comment lines into comments, rendering them null & void for all practical purposes.
        * Un-comment: to remove the '--' at the front of a comment line thus enabling it to take effect (or removing '- - [ [' & '- - ] ]' wrappage).
        
        
        This configuration file is interpreted in the context of the Elare Plugin Framework - most Lr namespaces are available, and all standard Elare interface objects are available, including:
        
        String/text formatting:
        * str:fmtx - a derivative of Lightroom's LOC function - same syntax for specifying placeholders in the format string..., e.g.
            str:fmtx( "Hello ^1^2", "World", "!!!" ) -- will create the string: "Hello World!!!".
          string.format 'C' string formatting function, e.g.
            string.format( "%u times", count ) -- outputs "5 times", if count is 5.
        Debugging (ignored if advanced debugging is not enabled) :
        * Debug.lognpp - log any number of parameters in a "pretty" format, e.g.
            Debug.lognpp( "before", devSets, "after", photo:getDevelopSettings() ) -- log before and after develop settings.
        * Debug.pause and Debug.pauseIf - shows values of variables, if any, and presents options to keep going or stop, e.g.
            Debug.pause( myvar ) -- stop execution temporarily, and show the value of myvar variable.
            Debug.pause() -- show nothing, but confirm execution has reached this point.
        Logging to plugin log file:
        * app:log and app:logv log file methods (LOC compatible formatting), e.g.
            app:log( "Here it is: ^1", it ) -- log it
            app:logv( "hmm..." ) -- log hmm... - included in log file only if verbose logging is enabled.
            
        and MANY more, but the luadoc is out of date - see source code itself, or examples here-in, for reference.
          
        Reference documentation can be obtained by reading the API doc, downloadable as part of the Lightroom SDK, from here:
        
        http://www.adobe.com/devnet/photoshoplightroom.html
        
        Get lua language documentation from www.lua.org
--]]

-- declare return table
-- (don't change this)
local _t = {}


_t[#_t + 1] = { id='saveMetadataKeyChar', friendly="Save Metadata Key Character", dataType='string', default='s',
    viewOptions={
        tooltip = "If standard English keyboard, 's' is the correct character for saving xmp metadata (i.e. ctrl-s on keyboard will save metadata). If not, then enter the correct keycode for your keyboard/language."
    } }

-- reminder: save/read metadata modes are exposed in plugin manager UI, so don't put here too.

if WIN_ENV then
_t[#_t + 1] = { id='readMetadataKeySeq', friendly="Read Metadata Key Sequence", dataType='string', default='mr',
    viewOptions={
        tooltip = "If standard English keyboard, 'mr' is the correct character sequence for reading xmp metadata (i.e. alt-mr on keyboard will read metadata). If not, then enter the correct key sequence for your keyboard/language."
    } }
end

_t[#_t + 1] = { id='fsTimeTolerance', friendly="Filesystem Timestamp Tolerance", dataType='number', default=2,
    viewOptions={
        precision = 0, -- integer
        min = 1,
        max = 8,
        tooltip = "If you are getting metadata save validation timeout errors, try doubling this number (you shouldn't have to go higher than 8).",
    } }


-- return config table
return _t